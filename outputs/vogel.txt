Filename: c:\Users\Nick\Documents\Programming\Python\transport-problem\vogel.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     8    100.8 MiB    100.8 MiB           1   @timeout(1)
     9                                         @profile
    10                                         def vogels_approximation_method(cost_matrix, supply, demand):
    11    100.8 MiB      0.0 MiB           1       num_sources = len(supply)
    12    100.8 MiB      0.0 MiB           1       num_destinations = len(demand)
    13                                             
    14                                             # Initialize the transportation matrix
    15    100.8 MiB      0.0 MiB           1       transport_matrix = np.zeros((num_sources, num_destinations))
    16                                             
    17                                             # Create a copy of the cost matrix for tracking remaining cells
    18    100.8 MiB      0.0 MiB           1       remaining_matrix = cost_matrix.copy()
    19                                         
    20                                             # Define a large finite value to represent allocated cells
    21    100.8 MiB      0.0 MiB           1       ALLOCATED = 1e5
    22                                             
    23                                             # Iterate until all supplies and demands are exhausted
    24    100.9 MiB      0.0 MiB          11       while np.sum(supply) > 0 and np.sum(demand) > 0:
    25                                                 # Calculate the penalty for each row and column
    26    100.9 MiB      0.0 MiB          10           row_penalties = np.zeros(num_sources)
    27    100.9 MiB      0.0 MiB          10           col_penalties = np.zeros(num_destinations)
    28                                                 
    29    100.9 MiB      0.0 MiB          60           for i in range(num_sources):
    30    100.9 MiB      0.0 MiB          50               if supply[i] > 0:
    31    100.9 MiB      0.0 MiB          31                   remaining_row = remaining_matrix[i, :]
    32    100.9 MiB      0.0 MiB          31                   sorted_row = np.sort(remaining_row[remaining_row != ALLOCATED])
    33    100.9 MiB      0.0 MiB          31                   if len(sorted_row) > 1:
    34    100.9 MiB      0.0 MiB          28                       row_penalties[i] = sorted_row[1] - sorted_row[0]
    35                                                         else:
    36    100.9 MiB      0.0 MiB           3                       row_penalties[i] = sorted_row[0]
    37                                                 
    38    100.9 MiB      0.0 MiB          70           for j in range(num_destinations):
    39    100.9 MiB      0.0 MiB          60               if demand[j] > 0:
    40    100.9 MiB      0.0 MiB          34                   remaining_col = remaining_matrix[:, j]
    41    100.9 MiB      0.0 MiB          34                   sorted_col = np.sort(remaining_col[remaining_col != ALLOCATED])
    42    100.9 MiB      0.0 MiB          34                   if len(sorted_col) > 1:
    43    100.9 MiB      0.0 MiB          33                       col_penalties[j] = sorted_col[1] - sorted_col[0]
    44                                                         else:
    45    100.9 MiB      0.0 MiB           1                       col_penalties[j] = sorted_col[0]
    46                                                 
    47                                                 # Find the row or column with the maximum penalty
    48    100.9 MiB      0.0 MiB          10           max_penalty = max(np.max(row_penalties), np.max(col_penalties))
    49                                                 
    50    100.9 MiB      0.0 MiB          10           if max_penalty in row_penalties:
    51    100.9 MiB      0.0 MiB           6               i = np.argmax(row_penalties)
    52    100.9 MiB      0.0 MiB           6               j = np.argmin(remaining_matrix[i, :])
    53                                                 else:
    54    100.9 MiB      0.0 MiB           4               j = np.argmax(col_penalties)
    55    100.9 MiB      0.0 MiB           4               i = np.argmin(remaining_matrix[:, j])
    56                                                 
    57                                                 # Determine the allocation for the selected cell
    58    100.9 MiB      0.0 MiB          10           allocation = min(supply[i], demand[j])
    59    100.9 MiB      0.0 MiB          10           transport_matrix[i, j] = allocation
    60                                                 
    61                                                 # Update the remaining supply and demand
    62    100.9 MiB      0.0 MiB          10           supply[i] -= allocation
    63    100.9 MiB      0.0 MiB          10           demand[j] -= allocation
    64                                                 
    65                                                 # Mark the cell as allocated by setting its cost to infinity
    66    100.9 MiB      0.0 MiB          10           remaining_matrix[i, j] = ALLOCATED
    67                                                 
    68                                                 # If the supply at the current source is exhausted, mark the corresponding row as allocated
    69    100.9 MiB      0.0 MiB          10           if supply[i] == 0:
    70    100.9 MiB      0.0 MiB           5               remaining_matrix[i, :] = ALLOCATED
    71                                                 
    72                                                 # If the demand at the current destination is satisfied, mark the corresponding column as allocated
    73    100.9 MiB      0.0 MiB          10           if demand[j] == 0:
    74    100.9 MiB      0.0 MiB           6               remaining_matrix[:, j] = ALLOCATED
    75                                             
    76                                             # Calculate the total transportation cost
    77    100.9 MiB      0.0 MiB           1       total_cost = np.sum(cost_matrix * transport_matrix)
    78                                             
    79    100.9 MiB      0.0 MiB           1       return transport_matrix, total_cost


[[ 0.  8.  0.  0.  0.  0.]
 [ 0.  0.  4. 11. 21.  0.]
 [ 8.  0.  0.  6.  0. 18.]
 [ 0.  1. 12.  0.  0.  0.]
 [21.  0.  0.  0.  0.  0.]]
Vogel's Approximation method cost:  217.0
